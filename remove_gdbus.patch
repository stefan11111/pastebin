diff --git a/demos/gtk-demo/application_demo.c b/demos/gtk-demo/application_demo.c
index 4174bbb..ab5446e 100644
--- a/demos/gtk-demo/application_demo.c
+++ b/demos/gtk-demo/application_demo.c
@@ -77,19 +77,6 @@ do_application_demo (GtkWidget *toplevel)
       placeholder = gtk_label_new ("");
       g_object_ref_sink (placeholder);
     }
-  else
-    {
-      g_dbus_connection_call_sync (g_bus_get_sync (G_BUS_TYPE_SESSION, NULL, NULL),
-                                   "org.gtk.Demo2",
-                                   "/org/gtk/Demo2",
-                                   "org.gtk.Actions",
-                                   "Activate",
-                                   g_variant_new ("(sava{sv})", "quit", NULL, NULL),
-                                   NULL,
-                                   0,
-                                   G_MAXINT,
-                                   NULL, NULL);
-    }
 
   return placeholder;
 }
diff --git a/gdk/wayland/gdkscreen-wayland.c b/gdk/wayland/gdkscreen-wayland.c
index 295180d..27454fc 100644
--- a/gdk/wayland/gdkscreen-wayland.c
+++ b/gdk/wayland/gdkscreen-wayland.c
@@ -723,14 +723,7 @@ init_settings (GdkScreen *screen)
       GVariantIter *iter;
       const char *patterns[] = { "org.gnome.*", NULL };
 
-      screen_wayland->settings_portal = g_dbus_proxy_new_for_bus_sync (G_BUS_TYPE_SESSION,
-                                                                       G_DBUS_PROXY_FLAGS_NONE,
-                                                                       NULL,
-                                                                       PORTAL_BUS_NAME,
-                                                                       PORTAL_OBJECT_PATH,
-                                                                       PORTAL_SETTINGS_INTERFACE,
-                                                                       NULL,
-                                                                       &error);
+      screen_wayland->settings_portal = NULL;
       if (error)
         {
           g_warning ("Settings portal not found: %s", error->message);
@@ -739,13 +732,7 @@ init_settings (GdkScreen *screen)
           goto fallback;
         }
 
-      ret = g_dbus_proxy_call_sync (screen_wayland->settings_portal,
-                                    "ReadAll",
-                                    g_variant_new ("(^as)", patterns),
-                                    G_DBUS_CALL_FLAGS_NONE,
-                                    G_MAXINT,
-                                    NULL,
-                                    &error);
+      ret = NULL;
       if (error)
         {
           g_warning ("Failed to read portal settings: %s", error->message);
@@ -803,15 +790,6 @@ fallback:
     }
 
   screen_wayland->dbus_cancellable = g_cancellable_new ();
-  g_dbus_proxy_new_for_bus (G_BUS_TYPE_SESSION,
-                            G_DBUS_PROXY_FLAGS_NONE,
-                            NULL,
-                            GTK_SETTINGS_DBUS_NAME,
-                            GTK_SETTINGS_DBUS_PATH,
-                            GTK_SETTINGS_DBUS_NAME,
-                            screen_wayland->dbus_cancellable,
-                            fontconfig_dbus_proxy_open_cb,
-                            screen_wayland);
 
   screen_wayland->settings = g_hash_table_new_full (g_str_hash, g_str_equal, NULL, g_object_unref);
 
@@ -1300,7 +1278,7 @@ fontconfig_dbus_proxy_open_cb (GObject      *object,
   GVariant *value;
   gint64 timestamp;
 
-  proxy = g_dbus_proxy_new_for_bus_finish (result, NULL);
+  proxy = NULL;
 
   if (proxy == NULL)
     return;
@@ -1312,8 +1290,7 @@ fontconfig_dbus_proxy_open_cb (GObject      *object,
                       G_CALLBACK (dbus_properties_change_cb),
                       screen_wayland);
 
-  value = g_dbus_proxy_get_cached_property (screen_wayland->dbus_proxy,
-                                            "FontconfigTimestamp");
+  value = NULL;
 
   if (value && g_variant_is_of_type (value, G_VARIANT_TYPE_INT64))
     {
@@ -1329,8 +1306,7 @@ fontconfig_dbus_proxy_open_cb (GObject      *object,
   if (value != NULL)
     g_variant_unref (value);
 
-  value = g_dbus_proxy_get_cached_property (screen_wayland->dbus_proxy,
-                                            "Modules");
+  value = NULL;
 
   if (value && g_variant_is_of_type (value, G_VARIANT_TYPE_STRING))
     {
diff --git a/gtk/filetransferportal.c b/gtk/filetransferportal.c
index 30afaee..35113d7 100644
--- a/gtk/filetransferportal.c
+++ b/gtk/filetransferportal.c
@@ -68,12 +68,12 @@ add_files_done (GObject      *object,
                 GAsyncResult *result,
                 gpointer      data)
 {
-  GDBusProxy *proxy = G_DBUS_PROXY (object);
+  GDBusProxy *proxy = NULL;
   AddFileData *afd = data;
   GError *error = NULL;
   GVariant *ret;
 
-  ret = g_dbus_proxy_call_with_unix_fd_list_finish (proxy, NULL, result, &error);
+  ret = NULL;
   if (ret == NULL)
     {
       g_task_return_error (afd->task, error);
@@ -149,13 +149,6 @@ add_files (GDBusProxy  *proxy,
   key = (char *)g_object_get_data (G_OBJECT (afd->task), "key");
 
   g_variant_builder_init (&options, G_VARIANT_TYPE_VARDICT);
-  g_dbus_proxy_call_with_unix_fd_list (proxy,
-                                       "AddFiles",
-                                       g_variant_new ("(saha{sv})", key, &fds, &options),
-                                       0, -1,
-                                       fd_list,
-                                       NULL,
-                                       add_files_done, afd);
 
   g_object_unref (fd_list);
 }
@@ -165,13 +158,13 @@ start_session_done (GObject      *object,
                     GAsyncResult *result,
                     gpointer      data)
 {
-  GDBusProxy *proxy = G_DBUS_PROXY (object);
+  GDBusProxy *proxy = NULL;
   AddFileData *afd = data;
   GError *error = NULL;
   GVariant *ret;
   const char *key;
 
-  ret = g_dbus_proxy_call_finish (proxy, result, &error);
+  ret = NULL;
   if (ret == NULL)
     {
       g_task_return_error (afd->task, error);
@@ -218,9 +211,6 @@ file_transfer_portal_register_files (const char          **files,
   g_variant_builder_add (&options, "{sv}", "writable", g_variant_new_boolean (writable));
   g_variant_builder_add (&options, "{sv}", "autostop", g_variant_new_boolean (TRUE));
 
-  g_dbus_proxy_call (file_transfer_proxy, "StartTransfer",
-                     g_variant_new ("(a{sv})", &options),
-                     0, -1, NULL, start_session_done, afd);
 }
 
 gboolean
@@ -250,13 +240,7 @@ file_transfer_portal_register_files_sync (const char **files,
   GVariant *ret;
 
   g_variant_builder_init (&options, G_VARIANT_TYPE_VARDICT);
-  ret = g_dbus_proxy_call_sync (file_transfer_proxy,
-                                "StartTransfer",
-                                g_variant_new ("(a{sv})", &options),
-                                0,
-                                -1,
-                                NULL,
-                                error);
+  ret = NULL;
   if (ret == NULL)
     return NULL;
 
@@ -308,18 +292,7 @@ file_transfer_portal_register_files_sync (const char **files,
       if ((i + 1) % 16 == 0 || files[i + 1] == NULL)
         {
           g_variant_builder_init (&options, G_VARIANT_TYPE_VARDICT);
-          ret = g_dbus_proxy_call_with_unix_fd_list_sync (file_transfer_proxy,
-                                                          "AddFiles",
-                                                          g_variant_new ("(saha{sv})",
-                                                                         key,
-                                                                         &fds,
-                                                                         &options),
-                                                          0,
-                                                          -1,
-                                                          fd_list,
-                                                          NULL,
-                                                          NULL,
-                                                          error);
+          ret = NULL;
           g_clear_object (&fd_list);
 
           if (ret == NULL)
@@ -340,13 +313,13 @@ retrieve_files_done (GObject      *object,
                      GAsyncResult *result,
                      gpointer      data)
 {
-  GDBusProxy *proxy = G_DBUS_PROXY (object);
+  GDBusProxy *proxy = NULL;
   GTask *task = data;
   GError *error = NULL;
   GVariant *ret;
   char **files;
 
-  ret = g_dbus_proxy_call_finish (proxy, result, &error);
+  ret = NULL;
   if (ret == NULL)
     {
       g_task_return_error (task, error);
@@ -382,11 +355,6 @@ file_transfer_portal_retrieve_files (const char          *key,
     }
 
   g_variant_builder_init (&options, G_VARIANT_TYPE_VARDICT);
-  g_dbus_proxy_call (file_transfer_proxy,
-                     "RetrieveFiles",
-                     g_variant_new ("(sa{sv})", key, &options),
-                     0, -1, NULL,
-                     retrieve_files_done, task);
 }
 
 gboolean
@@ -412,11 +380,7 @@ file_transfer_portal_retrieve_files_sync (const char  *key,
   char **files = NULL;
 
   g_variant_builder_init (&options, G_VARIANT_TYPE_VARDICT);
-  ret = g_dbus_proxy_call_sync (file_transfer_proxy,
-                                "RetrieveFiles",
-                                g_variant_new ("(sa{sv})", key, &options),
-                                0, -1, NULL,
-                                error);
+  ret = NULL;
   if (ret)
     {
       const char **value;
@@ -440,8 +404,6 @@ static void
 finish_registration (void)
 {
   /* Free the singleton when the connection closes, important for test */
-  g_signal_connect (g_dbus_proxy_get_connection (G_DBUS_PROXY (file_transfer_proxy)),
-                    "closed", G_CALLBACK (connection_closed), NULL);
 }
 
 static gboolean
@@ -449,7 +411,7 @@ proxy_has_owner (GDBusProxy *proxy)
 {
   char *owner;
 
-  owner = g_dbus_proxy_get_name_owner (proxy);
+  owner = NULL;
   if (owner)
     {
       g_free (owner);
@@ -468,16 +430,7 @@ file_transfer_portal_register (void)
     {
       called = TRUE;
 
-      file_transfer_proxy = g_dbus_proxy_new_for_bus_sync (G_BUS_TYPE_SESSION,
-                                G_DBUS_PROXY_FLAGS_DO_NOT_LOAD_PROPERTIES
-                                | G_DBUS_PROXY_FLAGS_DO_NOT_CONNECT_SIGNALS
-                                | G_DBUS_PROXY_FLAGS_DO_NOT_AUTO_START,
-                                NULL,
-                                "org.freedesktop.portal.Documents",
-                                "/org/freedesktop/portal/documents",
-                                "org.freedesktop.portal.FileTransfer",
-                                NULL,
-                                NULL);
+      file_transfer_proxy = NULL;
 
       if (file_transfer_proxy && !proxy_has_owner (file_transfer_proxy))
         g_clear_object (&file_transfer_proxy);
diff --git a/gtk/gtk-launch.c b/gtk/gtk-launch.c
index 87b351b..8af0eec 100644
--- a/gtk/gtk-launch.c
+++ b/gtk/gtk-launch.c
@@ -133,8 +133,7 @@ main (int argc, char *argv[])
       desktop_file_name = g_strconcat (app_name, ".desktop", NULL);
     }
 
-  if (!g_dbus_is_name (bus_name))
-    g_clear_pointer (&bus_name, g_free);
+  g_clear_pointer (&bus_name, g_free);
   info = G_APP_INFO (g_desktop_app_info_new (desktop_file_name));
   g_free (desktop_file_name);
 #else
@@ -187,14 +186,6 @@ main (int argc, char *argv[])
           if (*p == '.')
               *p = '/';
 
-      if (connection)
-        g_dbus_connection_call_sync (connection,
-                                     bus_name,
-                                     object_path,
-                                     "org.freedesktop.DBus.Peer",
-                                     "Ping",
-                                     NULL, NULL,
-                                     G_DBUS_CALL_FLAGS_NONE, -1, NULL, NULL);
       g_clear_pointer (&object_path, g_free);
       g_clear_object (&connection);
       g_clear_pointer (&bus_name, g_free);
diff --git a/gtk/gtkapplication-dbus.c b/gtk/gtkapplication-dbus.c
index 2c9a1a7..cd63b4a 100644
--- a/gtk/gtkapplication-dbus.c
+++ b/gtk/gtkapplication-dbus.c
@@ -55,14 +55,6 @@ unregister_client (GtkApplicationImplDBus *dbus)
 
   g_debug ("Unregistering client");
 
-  g_dbus_proxy_call_sync (dbus->sm_proxy,
-                          "UnregisterClient",
-                          g_variant_new ("(o)", dbus->client_path),
-                          G_DBUS_CALL_FLAGS_NONE,
-                          G_MAXINT,
-                          NULL,
-                          &error);
-
   if (error)
     {
       g_warning ("Failed to unregister client: %s", error->message);
@@ -83,12 +75,6 @@ send_quit_response (GtkApplicationImplDBus *dbus,
 {
   g_debug ("Calling EndSessionResponse %d '%s'", will_quit, reason);
 
-  g_dbus_proxy_call (dbus->client_proxy,
-                     "EndSessionResponse",
-                     g_variant_new ("(bs)", will_quit, reason ? reason : ""),
-                     G_DBUS_CALL_FLAGS_NONE,
-                     G_MAXINT,
-                     NULL, NULL, NULL);
 }
 
 static void
@@ -136,25 +122,16 @@ gtk_application_get_proxy_if_service_present (GDBusConnection *connection,
   GDBusProxy *proxy;
   gchar *owner;
 
-  proxy = g_dbus_proxy_new_sync (connection,
-                                 flags,
-                                 NULL,
-                                 bus_name,
-                                 object_path,
-                                 interface,
-                                 NULL,
-                                 error);
+  proxy = NULL;
 
   if (!proxy)
     return NULL;
 
   /* is there anyone actually providing the service? */
-  owner = g_dbus_proxy_get_name_owner (proxy);
+  owner = NULL;
   if (owner == NULL)
     {
       g_clear_object (&proxy);
-      g_set_error (error, G_DBUS_ERROR, G_DBUS_ERROR_NAME_HAS_NO_OWNER,
-                   "The name %s is not owned", bus_name);
     }
   else
     g_free (owner);
@@ -222,14 +199,6 @@ screensaver_signal_portal (GDBusConnection *connection,
       else if (session_state == QUERY_END)
         {
           g_signal_emit_by_name (dbus->impl.application, "query-end");
-
-          g_dbus_proxy_call (dbus->inhibit_proxy,
-                             "QueryEndResponse",
-                             g_variant_new ("(o)", dbus->session_id),
-                             G_DBUS_CALL_FLAGS_NONE,
-                             G_MAXINT,
-                             NULL,
-                             NULL, NULL);
         }
     }
 }
@@ -240,12 +209,12 @@ ss_get_active_cb (GObject      *source,
                   gpointer      data)
 {
   GtkApplicationImplDBus *dbus = (GtkApplicationImplDBus *) data;
-  GDBusProxy *proxy = G_DBUS_PROXY (source);
+  GDBusProxy *proxy = NULL;
   GError *error = NULL;
   GVariant *ret;
   gboolean active;
 
-  ret = g_dbus_proxy_call_finish (proxy, result, &error);
+  ret = NULL;
   if (ret == NULL)
     {
       g_warning ("Getting screensaver status failed: %s", error->message);
@@ -263,11 +232,11 @@ create_monitor_cb (GObject      *source,
                    GAsyncResult *result,
                    gpointer      data)
 {
-  GDBusProxy *proxy = G_DBUS_PROXY (source);
+  GDBusProxy *proxy = NULL;
   GError *error = NULL;
   GVariant *ret = NULL;
 
-  ret = g_dbus_proxy_call_finish (proxy, result, &error);
+  ret = NULL;
   if (ret == NULL)
     {
       g_warning ("Creating a portal monitor failed: %s", error->message);
@@ -297,7 +266,7 @@ gtk_application_impl_dbus_startup (GtkApplicationImpl *impl,
 
   dbus->application_id = g_application_get_application_id (G_APPLICATION (impl->application));
   dbus->object_path = g_application_get_dbus_object_path (G_APPLICATION (impl->application));
-  dbus->unique_name = g_dbus_connection_get_unique_name (dbus->session);
+  dbus->unique_name = NULL;
 
   if (gtk_should_use_portal ())
     goto out;
@@ -305,14 +274,7 @@ gtk_application_impl_dbus_startup (GtkApplicationImpl *impl,
   g_debug ("Connecting to session manager");
 
   /* Try the GNOME session manager first */
-  dbus->sm_proxy = gtk_application_get_proxy_if_service_present (dbus->session,
-                                                                 G_DBUS_PROXY_FLAGS_DO_NOT_AUTO_START |
-                                                                 G_DBUS_PROXY_FLAGS_DO_NOT_LOAD_PROPERTIES |
-                                                                 G_DBUS_PROXY_FLAGS_DO_NOT_CONNECT_SIGNALS,
-                                                                 GNOME_DBUS_NAME,
-                                                                 GNOME_DBUS_OBJECT_PATH,
-                                                                 GNOME_DBUS_INTERFACE,
-                                                                 &error);
+  dbus->sm_proxy = NULL;
 
   if (error)
     {
@@ -323,14 +285,7 @@ gtk_application_impl_dbus_startup (GtkApplicationImpl *impl,
   if (!dbus->sm_proxy)
     {
       /* Fallback to trying the Xfce session manager */
-      dbus->sm_proxy = gtk_application_get_proxy_if_service_present (dbus->session,
-                                                                     G_DBUS_PROXY_FLAGS_DO_NOT_AUTO_START |
-                                                                     G_DBUS_PROXY_FLAGS_DO_NOT_LOAD_PROPERTIES |
-                                                                     G_DBUS_PROXY_FLAGS_DO_NOT_CONNECT_SIGNALS,
-                                                                     XFCE_DBUS_NAME,
-                                                                     XFCE_DBUS_OBJECT_PATH,
-                                                                     XFCE_DBUS_INTERFACE,
-                                                                     &error);
+      dbus->sm_proxy = NULL;
 
       if (error)
         {
@@ -343,14 +298,7 @@ gtk_application_impl_dbus_startup (GtkApplicationImpl *impl,
   if (!register_session)
     goto out;
 
-  dbus->ss_proxy = gtk_application_get_proxy_if_service_present (dbus->session,
-                                                                 G_DBUS_PROXY_FLAGS_DO_NOT_AUTO_START |
-                                                                 G_DBUS_PROXY_FLAGS_DO_NOT_LOAD_PROPERTIES |
-                                                                 G_DBUS_PROXY_FLAGS_NONE,
-                                                                 GNOME_SCREENSAVER_DBUS_NAME,
-                                                                 GNOME_SCREENSAVER_DBUS_OBJECT_PATH,
-                                                                 GNOME_SCREENSAVER_DBUS_INTERFACE,
-                                                                 &error);
+  dbus->ss_proxy = NULL;
   if (error)
     {
       g_debug ("Failed to get the GNOME screensaver proxy: %s", error->message);
@@ -362,26 +310,11 @@ gtk_application_impl_dbus_startup (GtkApplicationImpl *impl,
     {
       g_signal_connect (dbus->ss_proxy, "g-signal",
                         G_CALLBACK (screensaver_signal_session), impl->application);
-
-      g_dbus_proxy_call (dbus->ss_proxy,
-                         "GetActive",
-                         NULL,
-                         G_DBUS_CALL_FLAGS_NONE,
-                         G_MAXINT,
-                         NULL,
-                         ss_get_active_cb,
-                         dbus);
     }
 
   g_debug ("Registering client '%s' '%s'", dbus->application_id, client_id);
 
-  res = g_dbus_proxy_call_sync (dbus->sm_proxy,
-                                "RegisterClient",
-                                g_variant_new ("(ss)", dbus->application_id, client_id),
-                                G_DBUS_CALL_FLAGS_NONE,
-                                G_MAXINT,
-                                NULL,
-                                &error);
+  res = NULL;
 
   if (error)
     {
@@ -396,24 +329,11 @@ gtk_application_impl_dbus_startup (GtkApplicationImpl *impl,
 
   g_debug ("Registered client at '%s'", dbus->client_path);
 
-  if (g_str_equal (g_dbus_proxy_get_name (dbus->sm_proxy), GNOME_DBUS_NAME))
-    {
-      bus_name = GNOME_DBUS_NAME;
-      client_interface = GNOME_DBUS_CLIENT_INTERFACE;
-    }
-  else
-    {
-      bus_name = XFCE_DBUS_NAME;
-      client_interface = XFCE_DBUS_CLIENT_INTERFACE;
-    }
 
-  dbus->client_proxy = g_dbus_proxy_new_sync (dbus->session, 0,
-                                              NULL,
-                                              bus_name,
-                                              dbus->client_path,
-                                              client_interface,
-                                              NULL,
-                                              &error);
+  bus_name = XFCE_DBUS_NAME;
+  client_interface = XFCE_DBUS_CLIENT_INTERFACE;
+
+  dbus->client_proxy = NULL;
   if (error)
     {
       g_warning ("Failed to get client proxy: %s", error->message);
@@ -440,17 +360,7 @@ gtk_application_impl_dbus_startup (GtkApplicationImpl *impl,
 
       if (id && id[0])
         {
-          res = g_dbus_connection_call_sync (dbus->session,
-                                             "org.freedesktop.DBus",
-                                             "/org/freedesktop/DBus",
-                                             "org.freedesktop.DBus",
-                                             "GetId",
-                                             NULL,
-                                             NULL,
-                                             G_DBUS_CALL_FLAGS_NONE,
-                                             -1,
-                                             NULL,
-                                             NULL);
+          res = NULL;
           if (res)
             {
               g_variant_get (res, "(&s)", &id2);
@@ -475,12 +385,7 @@ gtk_application_impl_dbus_startup (GtkApplicationImpl *impl,
 
   if (dbus->sm_proxy == NULL && dbus->session)
     {
-      dbus->inhibit_proxy = gtk_application_get_proxy_if_service_present (dbus->session,
-                                                                          G_DBUS_PROXY_FLAGS_NONE,
-                                                                          "org.freedesktop.portal.Desktop",
-                                                                          "/org/freedesktop/portal/desktop",
-                                                                          "org.freedesktop.portal.Inhibit",
-                                                                          &error);
+      dbus->inhibit_proxy = NULL;
       if (error)
         {
           g_debug ("Failed to get an inhibit portal proxy: %s", error->message);
@@ -496,27 +401,10 @@ gtk_application_impl_dbus_startup (GtkApplicationImpl *impl,
           /* Monitor screensaver state */
 
           dbus->session_id = gtk_get_portal_session_path (dbus->session, &token);
-          dbus->state_changed_handler =
-              g_dbus_connection_signal_subscribe (dbus->session,
-                                                  "org.freedesktop.portal.Desktop",
-                                                  "org.freedesktop.portal.Inhibit",
-                                                  "StateChanged",
-                                                  "/org/freedesktop/portal/desktop",
-                                                  NULL,
-                                                  G_DBUS_SIGNAL_FLAGS_NO_MATCH_RULE,
-                                                  screensaver_signal_portal,
-                                                  dbus,
-                                                  NULL);
+          dbus->state_changed_handler = NULL;
           g_variant_builder_init (&opt_builder, G_VARIANT_TYPE_VARDICT);
           g_variant_builder_add (&opt_builder, "{sv}",
                                  "session_handle_token", g_variant_new_string (token));
-          g_dbus_proxy_call (dbus->inhibit_proxy,
-                             "CreateMonitor",
-                             g_variant_new ("(sa{sv})", "", &opt_builder),
-                             G_DBUS_CALL_FLAGS_NONE,
-                             G_MAXINT,
-                             NULL,
-                             create_monitor_cb, dbus);
           g_free (token);
         }
     }
@@ -549,7 +437,7 @@ gtk_application_impl_dbus_window_added (GtkApplicationImpl *impl,
   actions = gtk_application_window_get_action_group (GTK_APPLICATION_WINDOW (window));
 
   path = gtk_application_impl_dbus_get_window_path (dbus, window);
-  id = g_dbus_connection_export_action_group (dbus->session, path, actions, NULL);
+  id = NULL;
   g_free (path);
 
   g_object_set_qdata (G_OBJECT (window), gtk_application_impl_dbus_export_id_quark (), GUINT_TO_POINTER (id));
@@ -565,7 +453,6 @@ gtk_application_impl_dbus_window_removed (GtkApplicationImpl *impl,
   id = GPOINTER_TO_UINT (g_object_get_qdata (G_OBJECT (window), gtk_application_impl_dbus_export_id_quark ()));
   if (id)
     {
-      g_dbus_connection_unexport_action_group (dbus->session, id);
       g_object_set_qdata (G_OBJECT (window), gtk_application_impl_dbus_export_id_quark (), NULL);
     }
 }
@@ -591,7 +478,6 @@ gtk_application_impl_dbus_publish_menu (GtkApplicationImplDBus  *dbus,
   /* unexport any existing menu */
   if (*id)
     {
-      g_dbus_connection_unexport_menu_model (dbus->session, *id);
       g_free (*path);
       *path = NULL;
       *id = 0;
@@ -602,14 +488,14 @@ gtk_application_impl_dbus_publish_menu (GtkApplicationImplDBus  *dbus,
     {
       /* try getting the preferred name */
       *path = g_strconcat (dbus->object_path, "/menus/", type, NULL);
-      *id = g_dbus_connection_export_menu_model (dbus->session, *path, model, NULL);
+      *id = NULL;
 
       /* keep trying until we get a working name... */
       for (i = 0; *id == 0; i++)
         {
           g_free (*path);
           *path = g_strdup_printf ("%s/menus/%s%d", dbus->object_path, type, i);
-          *id = g_dbus_connection_export_menu_model (dbus->session, *path, model, NULL);
+          *id = NULL;
         }
     }
 }
@@ -677,17 +563,7 @@ gtk_application_impl_dbus_inhibit (GtkApplicationImpl         *impl,
 
   if (dbus->sm_proxy)
     {
-      res = g_dbus_proxy_call_sync (dbus->sm_proxy,
-                                    "Inhibit",
-                                    g_variant_new ("(s@usu)",
-                                                   dbus->application_id,
-                                                   window ? gtk_application_impl_dbus_get_window_system_id (dbus, window) : g_variant_new_uint32 (0),
-                                                   reason ? reason : "",
-                                                   flags),
-                                    G_DBUS_CALL_FLAGS_NONE,
-                                    G_MAXINT,
-                                    NULL,
-                                    &error);
+      res = NULL;
 
       if (res)
         {
@@ -700,9 +576,6 @@ gtk_application_impl_dbus_inhibit (GtkApplicationImpl         *impl,
         {
           if (!warned)
             {
-              g_warning ("Calling %s.Inhibit failed: %s",
-                         g_dbus_proxy_get_interface_name (dbus->sm_proxy),
-                         error->message);
               warned = TRUE;
             }
           g_clear_error (&error);
@@ -714,16 +587,7 @@ gtk_application_impl_dbus_inhibit (GtkApplicationImpl         *impl,
 
       g_variant_builder_init (&options, G_VARIANT_TYPE_VARDICT);
       g_variant_builder_add (&options, "{sv}", "reason", g_variant_new_string (reason));
-      res = g_dbus_proxy_call_sync (dbus->inhibit_proxy,
-                                    "Inhibit",
-                                    g_variant_new ("(su@a{sv})",
-                                                   "", /* window */
-                                                   flags,
-                                                   g_variant_builder_end (&options)),
-                                    G_DBUS_CALL_FLAGS_NONE,
-                                    G_MAXINT,
-                                    NULL,
-                                    &error);
+      res = NULL;
       if (res)
         {
           InhibitHandle *handle;
@@ -743,9 +607,6 @@ gtk_application_impl_dbus_inhibit (GtkApplicationImpl         *impl,
         {
           if (!warned)
             {
-              g_warning ("Calling %s.Inhibit failed: %s",
-                         g_dbus_proxy_get_interface_name (dbus->inhibit_proxy),
-                         error->message);
               warned = TRUE;
             }
           g_clear_error (&error);
@@ -763,12 +624,6 @@ gtk_application_impl_dbus_uninhibit (GtkApplicationImpl *impl,
 
   if (dbus->sm_proxy)
     {
-      g_dbus_proxy_call (dbus->sm_proxy,
-                         "Uninhibit",
-                         g_variant_new ("(u)", cookie),
-                         G_DBUS_CALL_FLAGS_NONE,
-                         G_MAXINT,
-                         NULL, NULL, NULL);
     }
   else if (dbus->inhibit_proxy)
     {
@@ -779,16 +634,6 @@ gtk_application_impl_dbus_uninhibit (GtkApplicationImpl *impl,
           InhibitHandle *handle = l->data;
           if (handle->cookie == cookie)
             {
-              g_dbus_connection_call (dbus->session,
-                                      "org.freedesktop.portal.Desktop",
-                                      handle->handle,
-                                      "org.freedesktop.portal.Request",
-                                      "Close",
-                                      g_variant_new ("()"),
-                                      G_VARIANT_TYPE_UNIT,
-                                      G_DBUS_CALL_FLAGS_NONE,
-                                      G_MAXINT,
-                                      NULL, NULL, NULL);
               dbus->inhibit_handles = g_slist_remove (dbus->inhibit_handles, handle);
               inhibit_handle_free (handle);
               break;
@@ -810,20 +655,11 @@ gtk_application_impl_dbus_is_inhibited (GtkApplicationImpl         *impl,
   if (dbus->sm_proxy == NULL)
     return FALSE;
 
-  res = g_dbus_proxy_call_sync (dbus->sm_proxy,
-                                "IsInhibited",
-                                g_variant_new ("(u)", flags),
-                                G_DBUS_CALL_FLAGS_NONE,
-                                G_MAXINT,
-                                NULL,
-                                &error);
+  res = NULL;
   if (error)
     {
       if (!warned)
         {
-          g_warning ("Calling %s.IsInhibited failed: %s",
-                     g_dbus_proxy_get_interface_name (dbus->sm_proxy),
-                     error->message);
           warned = TRUE;
         }
       g_error_free (error);
@@ -880,20 +716,9 @@ gtk_application_impl_dbus_finalize (GObject *object)
 
   if (dbus->session_id)
     {
-      g_dbus_connection_call (dbus->session,
-                              "org.freedesktop.portal.Desktop",
-                              dbus->session_id,
-                              "org.freedesktop.portal.Session",
-                              "Close",
-                              NULL, NULL, 0, -1, NULL, NULL, NULL);
-
       g_free (dbus->session_id);
     }
 
-  if (dbus->state_changed_handler)
-    g_dbus_connection_signal_unsubscribe (dbus->session,
-                                          dbus->state_changed_handler);
-
   g_clear_object (&dbus->inhibit_proxy);
   g_slist_free_full (dbus->inhibit_handles, inhibit_handle_free);
   g_free (dbus->app_menu_path);
diff --git a/gtk/gtkapplication.c b/gtk/gtkapplication.c
index ac33c84..b656446 100644
--- a/gtk/gtkapplication.c
+++ b/gtk/gtkapplication.c
@@ -636,17 +636,13 @@ sysprof_profiler_method_call (GDBusConnection       *connection,
 
       if (GDK_PRIVATE_CALL (gdk_profiler_is_running) ())
         {
-          g_dbus_method_invocation_return_error (invocation,
-                                                 G_DBUS_ERROR,
-                                                 G_DBUS_ERROR_FAILED,
-                                                 "Profiler already running");
           return;
         }
 
       g_variant_get (parameters, "(@a{sv}h)", &options, &idx);
 
-      message = g_dbus_method_invocation_get_message (invocation);
-      fd_list = g_dbus_message_get_unix_fd_list (message);
+      message = 0;
+      fd_list = 0;
       if (fd_list)
         fd = g_unix_fd_list_get (fd_list, idx, NULL);
 
@@ -658,10 +654,6 @@ sysprof_profiler_method_call (GDBusConnection       *connection,
     {
       if (!GDK_PRIVATE_CALL (gdk_profiler_is_running) ())
         {
-          g_dbus_method_invocation_return_error (invocation,
-                                                 G_DBUS_ERROR,
-                                                 G_DBUS_ERROR_FAILED,
-                                                 "Profiler not running");
           return;
         }
 
@@ -669,14 +661,8 @@ sysprof_profiler_method_call (GDBusConnection       *connection,
     }
   else
     {
-      g_dbus_method_invocation_return_error (invocation,
-                                             G_DBUS_ERROR,
-                                             G_DBUS_ERROR_UNKNOWN_METHOD,
-                                             "Unknown method");
       return;
     }
-
-  g_dbus_method_invocation_return_value (invocation, NULL);
 }
 
 static gboolean
@@ -696,22 +682,14 @@ gtk_application_dbus_register (GApplication     *application,
     {
       GDBusNodeInfo *info;
 
-      info = g_dbus_node_info_new_for_xml (org_gnome_Sysprof3_Profiler_xml, error);
+      info = NULL;
       if (info == NULL)
         return FALSE;
 
-      org_gnome_Sysprof3_Profiler = g_dbus_node_info_lookup_interface (info, "org.gnome.Sysprof3.Profiler");
-      g_dbus_interface_info_ref (org_gnome_Sysprof3_Profiler);
-      g_dbus_node_info_unref (info);
+      org_gnome_Sysprof3_Profiler = NULL;
     }
 
-  priv->profiler_id = g_dbus_connection_register_object (connection,
-                                                         "/org/gtk/Profiler",
-                                                         org_gnome_Sysprof3_Profiler,
-                                                         &vtable,
-                                                         NULL,
-                                                         NULL,
-                                                         error);
+  priv->profiler_id = NULL;
 
   return TRUE;
 }
@@ -722,8 +700,6 @@ gtk_application_dbus_unregister (GApplication     *application,
                                  const char       *obect_path)
 {
   GtkApplicationPrivate *priv = gtk_application_get_instance_private (GTK_APPLICATION (application));
-
-  g_dbus_connection_unregister_object (connection, priv->profiler_id);
 }
 
 #else
diff --git a/gtk/gtkcolorpickerkwin.c b/gtk/gtkcolorpickerkwin.c
index 114d270..bdd9693 100644
--- a/gtk/gtkcolorpickerkwin.c
+++ b/gtk/gtkcolorpickerkwin.c
@@ -49,14 +49,7 @@ gtk_color_picker_kwin_initable_init (GInitable     *initable,
   GtkColorPickerKwin *picker = GTK_COLOR_PICKER_KWIN (initable);
   char *owner;
 
-  picker->kwin_proxy = g_dbus_proxy_new_for_bus_sync (G_BUS_TYPE_SESSION,
-                                                      G_DBUS_PROXY_FLAGS_NONE,
-                                                      NULL,
-                                                      "org.kde.KWin",
-                                                      "/ColorPicker",
-                                                      "org.kde.kwin.ColorPicker",
-                                                      NULL,
-                                                      error);
+  picker->kwin_proxy = NULL;
 
   if (picker->kwin_proxy == NULL)
     {
@@ -64,7 +57,7 @@ gtk_color_picker_kwin_initable_init (GInitable     *initable,
       return FALSE;
     }
 
-  owner = g_dbus_proxy_get_name_owner (picker->kwin_proxy);
+  owner = NULL;
   if (owner == NULL)
     {
       g_debug ("org.kde.kwin.ColorPicker not provided");
@@ -121,7 +114,7 @@ color_picked (GObject      *source,
   GError *error = NULL;
   GVariant *ret;
 
-  ret = g_dbus_proxy_call_finish (picker->kwin_proxy, res, &error);
+  ret = NULL;
 
   if (ret == NULL)
     {
@@ -158,15 +151,6 @@ gtk_color_picker_kwin_pick (GtkColorPicker      *cp,
     return;
 
   picker->task = g_task_new (picker, NULL, callback, user_data);
-
-  g_dbus_proxy_call (picker->kwin_proxy,
-                     "pick",
-                     NULL,
-                     0,
-                     -1,
-                     NULL,
-                     color_picked,
-                     picker);
 }
 
 static GdkRGBA *
diff --git a/gtk/gtkcolorpickerportal.c b/gtk/gtkcolorpickerportal.c
index 882421b..c2b6569 100644
--- a/gtk/gtkcolorpickerportal.c
+++ b/gtk/gtkcolorpickerportal.c
@@ -56,14 +56,7 @@ gtk_color_picker_portal_initable_init (GInitable     *initable,
   if (!gtk_should_use_portal ())
     return FALSE;
 
-  picker->portal_proxy = g_dbus_proxy_new_for_bus_sync (G_BUS_TYPE_SESSION,
-                                                        G_DBUS_PROXY_FLAGS_NONE,
-                                                        NULL,
-                                                        "org.freedesktop.portal.Desktop",
-                                                        "/org/freedesktop/portal/desktop",
-                                                        "org.freedesktop.portal.Screenshot",
-                                                        NULL,
-                                                        error);
+  picker->portal_proxy = NULL;
 
   if (picker->portal_proxy == NULL)
     {
@@ -71,7 +64,7 @@ gtk_color_picker_portal_initable_init (GInitable     *initable,
       return FALSE;
     }
 
-  owner = g_dbus_proxy_get_name_owner (picker->portal_proxy);
+  owner = NULL;
   if (owner == NULL)
     {
       g_debug ("org.freedesktop.portal.Screenshot not provided");
@@ -80,7 +73,7 @@ gtk_color_picker_portal_initable_init (GInitable     *initable,
     }
   g_free (owner);
 
-  ret = g_dbus_proxy_get_cached_property (picker->portal_proxy, "version");
+  ret = NULL;
   if (ret)
     {
       version = g_variant_get_uint32 (ret);
@@ -146,7 +139,6 @@ portal_response_received (GDBusConnection *connection,
   guint32 response;
   GVariant *ret;
 
-  g_dbus_connection_signal_unsubscribe (connection, picker->portal_signal_id);
   picker->portal_signal_id = 0;
 
   g_variant_get (parameters, "(u@a{sv})", &response, &ret);
@@ -191,34 +183,16 @@ gtk_color_picker_portal_pick (GtkColorPicker      *cp,
 
   picker->task = g_task_new (picker, NULL, callback, user_data);
 
-  connection = g_dbus_proxy_get_connection (picker->portal_proxy);
+  connection = NULL;
 
   handle = gtk_get_portal_request_path (connection, &token);
-  picker->portal_signal_id = g_dbus_connection_signal_subscribe (connection,
-                                                                 "org.freedesktop.portal.Desktop",
-                                                                 "org.freedesktop.portal.Request",
-                                                                 "Response",
-                                                                 handle,
-                                                                 NULL,
-                                                                 G_DBUS_SIGNAL_FLAGS_NO_MATCH_RULE,
-                                                                 portal_response_received,
-                                                                 picker,
-                                                                 NULL);
+  picker->portal_signal_id = NULL;
 
   g_free (handle);
 
   g_variant_builder_init (&options, G_VARIANT_TYPE_VARDICT);
   g_variant_builder_add (&options, "{sv}", "handle_token", g_variant_new_string (token));
   g_free (token);
-
-  g_dbus_proxy_call (picker->portal_proxy,
-                     "PickColor",
-                     g_variant_new ("(sa{sv})", "", &options),
-                     0,
-                     -1,
-                     NULL,
-                     NULL,
-                     NULL);
 }
 
 static GdkRGBA *
diff --git a/gtk/gtkcolorpickershell.c b/gtk/gtkcolorpickershell.c
index 6dfa299..fc18d5b 100644
--- a/gtk/gtkcolorpickershell.c
+++ b/gtk/gtkcolorpickershell.c
@@ -49,14 +49,7 @@ gtk_color_picker_shell_initable_init (GInitable     *initable,
   GtkColorPickerShell *picker = GTK_COLOR_PICKER_SHELL (initable);
   char *owner;
 
-  picker->shell_proxy = g_dbus_proxy_new_for_bus_sync (G_BUS_TYPE_SESSION,
-                                                        G_DBUS_PROXY_FLAGS_NONE,
-                                                        NULL,
-                                                        "org.gnome.Shell.Screenshot",
-                                                        "/org/gnome/Shell/Screenshot",
-                                                        "org.gnome.Shell.Screenshot",
-                                                        NULL,
-                                                        error);
+  picker->shell_proxy = NULL;
 
   if (picker->shell_proxy == NULL)
     {
@@ -64,7 +57,7 @@ gtk_color_picker_shell_initable_init (GInitable     *initable,
       return FALSE;
     }
 
-  owner = g_dbus_proxy_get_name_owner (picker->shell_proxy);
+  owner = NULL;
   if (owner == NULL)
     {
       g_debug ("org.gnome.Shell.Screenshot not provided");
@@ -121,7 +114,7 @@ color_picked (GObject      *source,
   GError *error = NULL;
   GVariant *ret, *dict;
 
-  ret = g_dbus_proxy_call_finish (picker->shell_proxy, res, &error);
+  ret = NULL;
 
   if (ret == NULL)
     {
@@ -157,15 +150,6 @@ gtk_color_picker_shell_pick (GtkColorPicker      *cp,
     return;
 
   picker->task = g_task_new (picker, NULL, callback, user_data);
-
-  g_dbus_proxy_call (picker->shell_proxy,
-                     "PickColor",
-                     NULL,
-                     0,
-                     -1,
-                     NULL,
-                     color_picked,
-                     picker);
 }
 
 static GdkRGBA *
diff --git a/gtk/gtkfilechoosernativeportal.c b/gtk/gtkfilechoosernativeportal.c
index a401ec9..28fca2e 100644
--- a/gtk/gtkfilechoosernativeportal.c
+++ b/gtk/gtkfilechoosernativeportal.c
@@ -66,8 +66,6 @@ static void
 filechooser_portal_data_free (FilechooserPortalData *data)
 {
   if (data->portal_response_signal_id != 0)
-    g_dbus_connection_signal_unsubscribe (data->connection,
-                                          data->portal_response_signal_id);
 
   g_object_unref (data->connection);
 
@@ -184,23 +182,10 @@ send_close (FilechooserPortalData *data)
   GDBusMessage *message;
   GError *error = NULL;
 
-  message = g_dbus_message_new_method_call ("org.freedesktop.portal.Desktop",
-                                            "/org/freedesktop/portal/desktop",
-                                            "org.freedesktop.portal.FileChooser",
-                                            "Close");
-  g_dbus_message_set_body (message,
-                           g_variant_new ("(o)", data->portal_handle));
-
-  if (!g_dbus_connection_send_message (data->connection,
-                                       message,
-                                       G_DBUS_SEND_MESSAGE_FLAGS_NONE,
-                                       NULL, &error))
-    {
-      g_warning ("unable to send FileChooser Close message: %s", error->message);
-      g_error_free (error);
-    }
+  message = NULL;
 
-  g_object_unref (message);
+  g_warning ("unable to send FileChooser Close message: %s", error->message);
+  g_error_free (error);
 }
 
 static void
@@ -214,10 +199,7 @@ open_file_msg_cb (GObject *source_object,
   GError *error = NULL;
   char *handle = NULL;
 
-  reply = g_dbus_connection_send_message_with_reply_finish (data->connection, res, &error);
-
-  if (reply && g_dbus_message_to_gerror (reply, &error))
-    g_clear_object (&reply);
+  reply = NULL;
 
   if (reply == NULL)
     {
@@ -230,7 +212,7 @@ open_file_msg_cb (GObject *source_object,
       return;
     }
 
-  g_variant_get_child (g_dbus_message_get_body (reply), 0, "o", &handle);
+  g_variant_get_child (NULL, 0, "o", &handle);
 
   if (data->hidden)
     {
@@ -243,19 +225,8 @@ open_file_msg_cb (GObject *source_object,
     {
       g_free (data->portal_handle);
       data->portal_handle = g_steal_pointer (&handle);
-      g_dbus_connection_signal_unsubscribe (data->connection,
-                                            data->portal_response_signal_id);
-
-      data->portal_response_signal_id =
-        g_dbus_connection_signal_subscribe (data->connection,
-                                            "org.freedesktop.portal.Desktop",
-                                            "org.freedesktop.portal.Request",
-                                            "Response",
-                                            data->portal_handle,
-                                            NULL,
-                                            G_DBUS_SIGNAL_FLAGS_NO_MATCH_RULE,
-                                            response_cb,
-                                            self, NULL);
+
+      data->portal_response_signal_id = NULL;
     }
 
   g_object_unref (reply);
@@ -330,22 +301,10 @@ show_portal_file_chooser (GtkFileChooserNative *self,
   const char *title;
   char *token;
 
-  message = g_dbus_message_new_method_call ("org.freedesktop.portal.Desktop",
-                                            "/org/freedesktop/portal/desktop",
-                                            "org.freedesktop.portal.FileChooser",
-                                            data->method_name);
+  message = NULL;
 
   data->portal_handle = gtk_get_portal_request_path (data->connection, &token);
-  data->portal_response_signal_id =
-        g_dbus_connection_signal_subscribe (data->connection,
-                                            "org.freedesktop.portal.Desktop",
-                                            "org.freedesktop.portal.Request",
-                                            "Response",
-                                            data->portal_handle,
-                                            NULL,
-                                            G_DBUS_SIGNAL_FLAGS_NO_MATCH_RULE,
-                                            response_cb,
-                                            self, NULL);
+  data->portal_response_signal_id = NULL;
 
   multiple = gtk_file_chooser_get_select_multiple (GTK_FILE_CHOOSER (self));
   directory = gtk_file_chooser_get_action (GTK_FILE_CHOOSER (self)) == GTK_FILE_CHOOSER_ACTION_SELECT_FOLDER;
@@ -399,21 +358,6 @@ show_portal_file_chooser (GtkFileChooserNative *self,
 
   title = gtk_native_dialog_get_title (GTK_NATIVE_DIALOG (self));
 
-  g_dbus_message_set_body (message,
-                           g_variant_new ("(ss@a{sv})",
-                                          parent_window_str ? parent_window_str : "",
-                                          title ? title : "",
-                                          g_variant_builder_end (&opt_builder)));
-
-  g_dbus_connection_send_message_with_reply (data->connection,
-                                             message,
-                                             G_DBUS_SEND_MESSAGE_FLAGS_NONE,
-                                             G_MAXINT,
-                                             NULL,
-                                             NULL,
-                                             open_file_msg_cb,
-                                             data);
-
   g_object_unref (message);
 }
 
diff --git a/gtk/gtkmountoperation.c b/gtk/gtkmountoperation.c
index 2cf7e75..66e277d 100644
--- a/gtk/gtkmountoperation.c
+++ b/gtk/gtkmountoperation.c
@@ -193,19 +193,11 @@ gtk_mount_operation_init (GtkMountOperation *operation)
 
   operation->priv = gtk_mount_operation_get_instance_private (operation);
 
-  operation->priv->handler =
-    _gtk_mount_operation_handler_proxy_new_for_bus_sync (G_BUS_TYPE_SESSION,
-                                                         G_DBUS_PROXY_FLAGS_DO_NOT_AUTO_START,
-                                                         "org.gtk.MountOperationHandler",
-                                                         "/org/gtk/MountOperationHandler",
-                                                         NULL, NULL);
-  name_owner = g_dbus_proxy_get_name_owner (G_DBUS_PROXY (operation->priv->handler));
+  operation->priv->handler = NULL;
+  name_owner = NULL;
   if (!name_owner)
     g_clear_object (&operation->priv->handler);
   g_free (name_owner);
-
-  if (operation->priv->handler)
-    g_dbus_proxy_set_default_timeout (G_DBUS_PROXY (operation->priv->handler), G_MAXINT);
 }
 
 static void
diff --git a/gtk/gtkplacessidebar.c b/gtk/gtkplacessidebar.c
index 7ce19e8..2242f40 100644
--- a/gtk/gtkplacessidebar.c
+++ b/gtk/gtkplacessidebar.c
@@ -3970,8 +3970,7 @@ update_hostname (GtkPlacesSidebar *sidebar)
   if (sidebar->hostnamed_proxy == NULL)
     return;
 
-  variant = g_dbus_proxy_get_cached_property (sidebar->hostnamed_proxy,
-                                              "PrettyHostname");
+  variant = NULL;
   if (variant == NULL)
     return;
 
@@ -3996,7 +3995,7 @@ hostname_proxy_new_cb (GObject      *source_object,
   GError *error = NULL;
   GDBusProxy *proxy;
 
-  proxy = g_dbus_proxy_new_for_bus_finish (res, &error);
+  proxy = NULL;
   if (g_error_matches (error, G_IO_ERROR, G_IO_ERROR_CANCELLED))
     {
       g_error_free (error);
@@ -4160,15 +4159,6 @@ gtk_places_sidebar_init (GtkPlacesSidebar *sidebar)
 
   sidebar->hostname = g_strdup (_("Computer"));
   sidebar->hostnamed_cancellable = g_cancellable_new ();
-  g_dbus_proxy_new_for_bus (G_BUS_TYPE_SYSTEM,
-                            G_DBUS_PROXY_FLAGS_GET_INVALIDATED_PROPERTIES,
-                            NULL,
-                            "org.freedesktop.hostname1",
-                            "/org/freedesktop/hostname1",
-                            "org.freedesktop.hostname1",
-                            sidebar->hostnamed_cancellable,
-                            hostname_proxy_new_cb,
-                            sidebar);
 
   sidebar->drop_state = DROP_STATE_NORMAL;
 
diff --git a/gtk/gtkprintoperation-portal.c b/gtk/gtkprintoperation-portal.c
index 271ede4..68db7c0 100644
--- a/gtk/gtkprintoperation-portal.c
+++ b/gtk/gtkprintoperation-portal.c
@@ -168,9 +168,7 @@ print_file_done (GObject *source,
   GError *error = NULL;
   GVariant *ret;
 
-  ret = g_dbus_proxy_call_finish (op_portal->proxy,
-                                  result,
-                                  &error);
+  ret = NULL;
   if (ret == NULL)
     {
       if (op->priv->error == NULL)
@@ -224,19 +222,6 @@ portal_job_complete (GtkPrintJob  *job,
   g_variant_builder_init (&opt_builder, G_VARIANT_TYPE_VARDICT);
   g_variant_builder_add (&opt_builder, "{sv}",  "token", g_variant_new_uint32 (op_portal->token));
 
-  g_dbus_proxy_call_with_unix_fd_list (op_portal->proxy,
-                                       "Print",
-                                       g_variant_new ("(ssh@a{sv})",
-                                                      "", /* window */
-                                                      _("Print"), /* title */
-                                                      idx,
-                                                      g_variant_builder_end (&opt_builder)),
-                                       G_DBUS_CALL_FLAGS_NONE,
-                                       -1,
-                                       fd_list,
-                                       NULL,
-                                       print_file_done,
-                                       op);
   g_object_unref (fd_list);
 }
 
@@ -383,8 +368,6 @@ prepare_print_response (GDBusConnection *connection,
 
   if (portal->response_signal_id != 0)
     {
-      g_dbus_connection_signal_unsubscribe (connection,
-                                            portal->response_signal_id);
       portal->response_signal_id = 0;
     }
 
@@ -449,7 +432,7 @@ prepare_print_called (GObject      *source,
   const char *handle = NULL;
   GVariant *ret;
 
-  ret = g_dbus_proxy_call_finish (portal->proxy, result, &error);
+  ret = NULL;
   if (ret == NULL)
     {
       if (portal->op->priv->error == NULL)
@@ -466,18 +449,8 @@ prepare_print_called (GObject      *source,
     {
       g_free (portal->prepare_print_handle);
       portal->prepare_print_handle = g_strdup (handle);
-      g_dbus_connection_signal_unsubscribe (g_dbus_proxy_get_connection (G_DBUS_PROXY (portal->proxy)),
-                                            portal->response_signal_id);
-      portal->response_signal_id =
-        g_dbus_connection_signal_subscribe (g_dbus_proxy_get_connection (G_DBUS_PROXY (portal->proxy)),
-                                            "org.freedesktop.portal.Desktop",
-                                            "org.freedesktop.portal.Request",
-                                            "Response",
-                                            handle,
-                                            NULL,
-                                            G_DBUS_SIGNAL_FLAGS_NO_MATCH_RULE,
-                                            prepare_print_response,
-                                            portal, NULL);
+
+      portal->response_signal_id = NULL;
      }
 
   g_variant_unref (ret);
@@ -497,14 +470,7 @@ create_portal_data (GtkPrintOperation          *op,
   if (g_signal_has_handler_pending (op, signal_id, 0, TRUE))
     g_warning ("GtkPrintOperation::create-custom-widget not supported with portal");
 
-  proxy = g_dbus_proxy_new_for_bus_sync (G_BUS_TYPE_SESSION,
-                                         G_DBUS_PROXY_FLAGS_NONE,
-                                         NULL,
-                                         "org.freedesktop.portal.Desktop",
-                                         "/org/freedesktop/portal/desktop",
-                                         "org.freedesktop.portal.Print",
-                                         NULL,
-                                         &error);
+  proxy = NULL;
 
   if (proxy == NULL)
     {
@@ -542,19 +508,6 @@ window_handle_exported (GtkWindow  *window,
 {
   PortalData *portal = user_data;
 
-  g_dbus_proxy_call (portal->proxy,
-                     "PreparePrint",
-                     g_variant_new ("(ss@a{sv}@a{sv}@a{sv})",
-                                    handle_str,
-                                    _("Print"), /* title */
-                                    portal->settings,
-                                    portal->setup,
-                                    portal->options),
-                     G_DBUS_CALL_FLAGS_NONE,
-                     -1,
-                     NULL,
-                     prepare_print_called,
-                     portal);
 }
 
 static void
@@ -566,18 +519,9 @@ call_prepare_print (GtkPrintOperation *op,
   char *token;
 
   portal->prepare_print_handle =
-      gtk_get_portal_request_path (g_dbus_proxy_get_connection (portal->proxy), &token);
-
-  portal->response_signal_id =
-    g_dbus_connection_signal_subscribe (g_dbus_proxy_get_connection (G_DBUS_PROXY (portal->proxy)),
-                                        "org.freedesktop.portal.Desktop",
-                                        "org.freedesktop.portal.Request",
-                                        "Response",
-                                        portal->prepare_print_handle,
-                                        NULL,
-                                        G_DBUS_SIGNAL_FLAGS_NO_MATCH_RULE,
-                                        prepare_print_response,
-                                        portal, NULL);
+      gtk_get_portal_request_path (NULL, &token);
+
+  portal->response_signal_id = NULL;
 
   g_variant_builder_init (&opt_builder, G_VARIANT_TYPE_VARDICT);
   g_variant_builder_add (&opt_builder, "{sv}", "handle_token", g_variant_new_string (token));
@@ -610,20 +554,6 @@ call_prepare_print (GtkPrintOperation *op,
       gtk_widget_is_visible (GTK_WIDGET (portal->parent)) &&
       gtk_window_export_handle (portal->parent, window_handle_exported, portal))
     return;
-
-  g_dbus_proxy_call (portal->proxy,
-                     "PreparePrint",
-                     g_variant_new ("(ss@a{sv}@a{sv}@a{sv})",
-                                    "",
-                                    _("Print"), /* title */
-                                    portal->settings,
-                                    portal->setup,
-                                    portal->options),
-                     G_DBUS_CALL_FLAGS_NONE,
-                     -1,
-                     NULL,
-                     prepare_print_called,
-                     portal);
 }
 
 GtkPrintOperationResult
diff --git a/gtk/gtkprivate.c b/gtk/gtkprivate.c
index b3278cc..9a659e3 100644
--- a/gtk/gtkprivate.c
+++ b/gtk/gtkprivate.c
@@ -310,14 +310,7 @@ gtk_get_portal_interface_version (GDBusConnection *connection,
   char *owner = NULL;
   guint version = 0;
 
-  proxy = g_dbus_proxy_new_sync (connection,
-                                 0,
-                                 NULL,
-                                 "org.freedesktop.portal.Desktop",
-                                 "/org/freedesktop/portal/desktop",
-                                 interface_name,
-                                 NULL,
-                                 &error);
+  proxy = NULL;
   if (!proxy)
     {
       if (!g_error_matches (error, G_IO_ERROR, G_IO_ERROR_CANCELLED))
@@ -326,14 +319,14 @@ gtk_get_portal_interface_version (GDBusConnection *connection,
       goto out;
     }
 
-  owner = g_dbus_proxy_get_name_owner (proxy);
+  owner = NULL;
   if (owner == NULL)
     {
       g_debug ("%s not provided by any service", interface_name);
       goto out;
     }
 
-  ret = g_dbus_proxy_get_cached_property (proxy, "version");
+  ret = NULL;
   if (ret)
     version = g_variant_get_uint32 (ret);
 
@@ -359,15 +352,9 @@ get_portal_path (GDBusConnection  *connection,
   char *path;
 
   *token = g_strdup_printf ("gtk%d", g_random_int_range (0, G_MAXINT));
-  sender = g_strdup (g_dbus_connection_get_unique_name (connection) + 1);
-  for (i = 0; sender[i]; i++)
-    if (sender[i] == '.')
-      sender[i] = '_';
 
   path = g_strconcat ("/org/freedesktop/portal/desktop", "/", kind, "/", sender, "/", *token, NULL);
 
-  g_free (sender);
-
   return path;
 }
 
diff --git a/gtk/gtksearchenginetracker.c b/gtk/gtksearchenginetracker.c
index 7350d5e..7b52eea 100644
--- a/gtk/gtksearchenginetracker.c
+++ b/gtk/gtksearchenginetracker.c
@@ -122,17 +122,7 @@ get_connection (void)
    * We use the sync call here because we don't expect to be waiting
    * long enough to block UI painting.
    */
-  reply = g_dbus_connection_call_sync (connection,
-                                       DBUS_SERVICE_STATUS,
-                                       DBUS_PATH_STATUS,
-                                       DBUS_INTERFACE_STATUS,
-                                       "Wait",
-                                       NULL,
-                                       NULL,
-                                       G_DBUS_CALL_FLAGS_NONE,
-                                       WAIT_TIMEOUT_SECONDS * 1000,
-                                       NULL,
-                                       &error);
+  reply = NULL;
 
   if (error)
     {
@@ -155,18 +145,7 @@ get_query_results (GtkSearchEngineTracker *engine,
                    GAsyncReadyCallback     callback,
                    gpointer                user_data)
 {
-  g_dbus_connection_call (engine->connection,
-                          DBUS_SERVICE_RESOURCES,
-                          DBUS_PATH_RESOURCES,
-                          DBUS_INTERFACE_RESOURCES,
-                          "SparqlQuery",
-                          g_variant_new ("(s)", sparql),
-                          NULL,
-                          G_DBUS_CALL_FLAGS_NONE,
-                          QUERY_TIMEOUT_SECONDS * 1000,
-                          engine->cancellable,
-                          callback,
-                          user_data);
+
 }
 
 /* Stolen from libtracker-sparql */
@@ -280,7 +259,7 @@ query_callback (GObject      *object,
 
   tracker->query_pending = FALSE;
 
-  reply = g_dbus_connection_call_finish (tracker->connection, res, &error);
+  reply = NULL;
   if (error)
     {
       _gtk_search_engine_error (GTK_SEARCH_ENGINE (tracker), error->message);
diff --git a/modules/printbackends/cups/gtkcupssecretsutils.c b/modules/printbackends/cups/gtkcupssecretsutils.c
index 925f7d5..2a9ca18 100644
--- a/modules/printbackends/cups/gtkcupssecretsutils.c
+++ b/modules/printbackends/cups/gtkcupssecretsutils.c
@@ -115,17 +115,14 @@ get_secret_cb (GObject      *source_object,
   task = user_data;
   task_data = g_task_get_task_data (task);
 
-  output = g_dbus_proxy_call_finish (G_DBUS_PROXY (source_object),
-                                     res,
-                                     &error);
+  output = NULL;
   if (output == NULL)
     {
       g_task_return_error (task, error);
       return;
     }
 
-  attributes = g_dbus_proxy_get_cached_property (task_data->item_proxy,
-                                                 "Attributes");
+  attributes = NULL);
   if (attributes == NULL)
     {
       GTK_NOTE (PRINTING, g_print ("Failed to lookup attributes.\n"));
@@ -251,9 +248,7 @@ create_item_cb (GObject      *source_object,
 
   task = user_data;
 
-  output = g_dbus_connection_call_finish (G_DBUS_CONNECTION (source_object),
-                                          res,
-                                          &error);
+  output = NULL;
   if (output == NULL)
     {
       g_task_return_error (task, error);
@@ -345,21 +340,6 @@ do_store_auth_info (GTask *task)
                           g_variant_new_bytestring (password),
                           "text/plain");
 
-  g_dbus_connection_call (task_data->dbus_connection,
-                          SECRETS_BUS,
-                          task_data->collection_path,
-                          SECRETS_IFACE ("Collection"),
-                          "CreateItem",
-                          g_variant_new ("(@a{sv}@(oayays)b)",
-                                         properties,
-                                         secret,
-                                         TRUE),
-                          G_VARIANT_TYPE ("(oo)"),
-                          G_DBUS_CALL_FLAGS_NONE,
-                          SECRETS_TIMEOUT,
-                          g_task_get_cancellable (task),
-                          create_item_cb,
-                          task);
 }
 
 static void
@@ -379,8 +359,6 @@ prompt_completed_cb (GDBusConnection *connection,
   task = user_data;
   task_data = g_task_get_task_data (task);
 
-  g_dbus_connection_signal_unsubscribe (task_data->dbus_connection,
-                                        task_data->prompt_subscription);
   task_data->prompt_subscription = 0;
 
   dismissed = g_variant_get_child_value (parameters, 0);
@@ -410,15 +388,6 @@ prompt_completed_cb (GDBusConnection *connection,
         break;
 
       case SECRETS_SERVICE_ACTION_QUERY:
-        g_dbus_proxy_call (task_data->item_proxy,
-                           "GetSecret",
-                           g_variant_new ("(o)",
-                                          task_data->session_path),
-                           G_DBUS_CALL_FLAGS_NONE,
-                           SECRETS_TIMEOUT,
-                           g_task_get_cancellable (task),
-                           get_secret_cb,
-                           task);
         break;
     }
 }
@@ -436,9 +405,7 @@ prompt_cb (GObject      *source_object,
   task = user_data;
   task_data = g_task_get_task_data (task);
 
-  output = g_dbus_connection_call_finish (G_DBUS_CONNECTION (source_object),
-                                          res,
-                                          &error);
+  output = NULL;
   if (output == NULL)
     {
       g_task_return_error (task, error);
@@ -449,16 +416,6 @@ prompt_cb (GObject      *source_object,
 
   /* Connect to the prompt's completed signal */
   task_data->prompt_subscription =
-    g_dbus_connection_signal_subscribe (task_data->dbus_connection,
-                                        NULL,
-                                        SECRETS_IFACE ("Prompt"),
-                                        "Completed",
-                                        NULL,
-                                        NULL,
-                                        G_DBUS_SIGNAL_FLAGS_NONE,
-                                        prompt_completed_cb,
-                                        task,
-                                        NULL);
 }
 
 static void
@@ -475,9 +432,7 @@ unlock_collection_cb (GObject      *source_object,
   task = user_data;
   task_data = g_task_get_task_data (task);
 
-  output = g_dbus_connection_call_finish (G_DBUS_CONNECTION (source_object),
-                                          res,
-                                          &error);
+  output = NULL;
   if (output == NULL)
     {
       g_task_return_error (task, error);
@@ -488,18 +443,6 @@ unlock_collection_cb (GObject      *source_object,
 
   if (prompt_path != NULL && strlen (prompt_path) > 1)
     {
-      g_dbus_connection_call (task_data->dbus_connection,
-                              SECRETS_BUS,
-                              prompt_path,
-                              SECRETS_IFACE ("Prompt"),
-                              "Prompt",
-                              g_variant_new ("(s)", "0"),
-                              G_VARIANT_TYPE ("()"),
-                              G_DBUS_CALL_FLAGS_NONE,
-                              SECRETS_TIMEOUT,
-                              g_task_get_cancellable (task),
-                              prompt_cb,
-                              task);
     }
   else
     {
@@ -511,15 +454,6 @@ unlock_collection_cb (GObject      *source_object,
 
           case SECRETS_SERVICE_ACTION_QUERY:
             /* Prompt successfull proceed to get secret */
-            g_dbus_proxy_call (task_data->item_proxy,
-                               "GetSecret",
-                               g_variant_new ("(o)",
-                                              task_data->session_path),
-                               G_DBUS_CALL_FLAGS_NONE,
-                               SECRETS_TIMEOUT,
-                               g_task_get_cancellable (task),
-                               get_secret_cb,
-                               task);
             break;
         }
     }
@@ -542,9 +476,7 @@ unlock_read_alias_cb (GObject      *source_object,
   task = user_data;
   task_data = g_task_get_task_data (task);
 
-  output = g_dbus_connection_call_finish (G_DBUS_CONNECTION (source_object),
-                                          res,
-                                          &error);
+  output = NULL;
   if (output == NULL)
     {
       g_task_return_error (task, error);
@@ -567,19 +499,6 @@ unlock_read_alias_cb (GObject      *source_object,
 
   task_data->collection_path = g_strdup (collection_path);
 
-  g_dbus_connection_call (task_data->dbus_connection,
-                          SECRETS_BUS,
-                          SECRETS_PATH,
-                          SECRETS_IFACE ("Service"),
-                          "Unlock",
-                          g_variant_new ("(^ao)", to_unlock),
-                          G_VARIANT_TYPE ("(aoo)"),
-                          G_DBUS_CALL_FLAGS_NONE,
-                          SECRETS_TIMEOUT,
-                          g_task_get_cancellable (task),
-                          unlock_collection_cb,
-                          task);
-
   g_variant_unref (subresult);
 }
 
@@ -598,8 +517,7 @@ item_proxy_cb (GObject      *source_object,
   task = user_data;
   task_data = g_task_get_task_data (task);
 
-  item_proxy = g_dbus_proxy_new_finish (res,
-                                        &error);
+  item_proxy = NULL;
   if (item_proxy == NULL)
     {
       g_task_return_error (task, error);
@@ -608,7 +526,7 @@ item_proxy_cb (GObject      *source_object,
 
   task_data->item_proxy = item_proxy;
 
-  locked = g_dbus_proxy_get_cached_property (item_proxy, "Locked");
+  locked = NULL;
 
   if (locked == NULL)
     {
@@ -623,18 +541,6 @@ item_proxy_cb (GObject      *source_object,
   if (is_locked)
     {
       /* Go down the unlock -> lookup path */
-      g_dbus_connection_call (task_data->dbus_connection,
-                              SECRETS_BUS,
-                              SECRETS_PATH,
-                              SECRETS_IFACE ("Service"),
-                              "ReadAlias",
-                              g_variant_new ("(s)", "default"),
-                              G_VARIANT_TYPE ("(o)"),
-                              G_DBUS_CALL_FLAGS_NONE,
-                              SECRETS_TIMEOUT,
-                              g_task_get_cancellable (task),
-                              unlock_read_alias_cb,
-                              task);
       return;
     }
 
@@ -646,15 +552,6 @@ item_proxy_cb (GObject      *source_object,
         break;
 
       case SECRETS_SERVICE_ACTION_QUERY:
-        g_dbus_proxy_call (item_proxy,
-                           "GetSecret",
-                           g_variant_new ("(o)",
-                                          task_data->session_path),
-                           G_DBUS_CALL_FLAGS_NONE,
-                           SECRETS_TIMEOUT,
-                           g_task_get_cancellable (task),
-                           get_secret_cb,
-                           task);
         break;
     }
 }
@@ -675,9 +572,7 @@ search_items_cb (GObject      *source_object,
   task = user_data;
   task_data = g_task_get_task_data (task);
 
-  output = g_dbus_connection_call_finish (G_DBUS_CONNECTION (source_object),
-                                          res,
-                                          &error);
+  output = NULL;
   if (output == NULL)
     {
       g_task_return_error (task, error);
@@ -709,15 +604,6 @@ search_items_cb (GObject      *source_object,
 
       /* Access the first found item. */
       found_item = TRUE;
-      g_dbus_proxy_new (task_data->dbus_connection,
-                        G_DBUS_PROXY_FLAGS_NONE,
-                        NULL,
-                        SECRETS_BUS,
-                        *items,
-                        SECRETS_IFACE ("Item"),
-                        g_task_get_cancellable (task),
-                        item_proxy_cb,
-                        task);
       g_free ((gpointer) items);
       g_variant_unref (item_paths);
       break;
@@ -746,9 +632,7 @@ open_session_cb (GObject      *source_object,
   task = user_data;
   task_data = g_task_get_task_data (task);
 
-  output = g_dbus_connection_call_finish (G_DBUS_CONNECTION (source_object),
-                                          res,
-                                          &error);
+  output = NULL;
   if (output == NULL)
     {
       g_task_return_error (task, error);
@@ -794,36 +678,12 @@ open_session_cb (GObject      *source_object,
               return;
             }
 
-          g_dbus_connection_call (task_data->dbus_connection,
-                                  SECRETS_BUS,
-                                  SECRETS_PATH,
-                                  SECRETS_IFACE ("Service"),
-                                  "SearchItems",
-                                  g_variant_new ("(@a{ss})", secrets_attrs),
-                                  G_VARIANT_TYPE ("(aoao)"),
-                                  G_DBUS_CALL_FLAGS_NONE,
-                                  SECRETS_TIMEOUT,
-                                  g_task_get_cancellable (task),
-                                  search_items_cb,
-                                  task);
           break;
         }
 
       case SECRETS_SERVICE_ACTION_STORE:
         {
           /* Look up / unlock the default collection for storing */
-          g_dbus_connection_call (task_data->dbus_connection,
-                                  SECRETS_BUS,
-                                  SECRETS_PATH,
-                                  SECRETS_IFACE ("Service"),
-                                  "ReadAlias",
-                                  g_variant_new ("(s)", "default"),
-                                  G_VARIANT_TYPE ("(o)"),
-                                  G_DBUS_CALL_FLAGS_NONE,
-                                  SECRETS_TIMEOUT,
-                                  g_task_get_cancellable (task),
-                                  unlock_read_alias_cb,
-                                  task);
           break;
         }
     }
@@ -849,19 +709,6 @@ get_connection_cb (GObject      *source_object,
     }
 
   /* Now open a session */
-  g_dbus_connection_call (task_data->dbus_connection,
-                          SECRETS_BUS,
-                          SECRETS_PATH,
-                          SECRETS_IFACE ("Service"),
-                          "OpenSession",
-                          g_variant_new ("(sv)", "plain",
-                                         g_variant_new_string ("")),
-                          G_VARIANT_TYPE ("(vo)"),
-                          G_DBUS_CALL_FLAGS_NONE,
-                          SECRETS_TIMEOUT,
-                          g_task_get_cancellable (task),
-                          open_session_cb,
-                          task);
 }
 
 /**
@@ -911,25 +758,11 @@ cleanup_task_data (gpointer data)
 
   if (task_data->prompt_subscription != 0)
     {
-      g_dbus_connection_signal_unsubscribe (task_data->dbus_connection,
-                                            task_data->prompt_subscription);
       task_data->prompt_subscription = 0;
     }
 
   if (task_data->session_path != NULL)
     {
-      g_dbus_connection_call (task_data->dbus_connection,
-                              SECRETS_BUS,
-                              task_data->session_path,
-                              SECRETS_IFACE ("Session"),
-                              "Close",
-                              NULL,
-                              G_VARIANT_TYPE ("()"),
-                              G_DBUS_CALL_FLAGS_NONE,
-                              SECRETS_TIMEOUT,
-                              NULL,
-                              NULL,
-                              NULL);
     }
 
   g_clear_object (&task_data->dbus_connection);
diff --git a/modules/printbackends/cups/gtkprintbackendcups.c b/modules/printbackends/cups/gtkprintbackendcups.c
index d5c00f9..85d7362 100644
--- a/modules/printbackends/cups/gtkprintbackendcups.c
+++ b/modules/printbackends/cups/gtkprintbackendcups.c
@@ -986,33 +986,17 @@ gtk_print_backend_cups_dispose (GObject *object)
     {
       if (backend_cups->avahi_service_browser_subscription_ids[i] > 0)
         {
-          g_dbus_connection_signal_unsubscribe (backend_cups->dbus_connection,
-                                                backend_cups->avahi_service_browser_subscription_ids[i]);
           backend_cups->avahi_service_browser_subscription_ids[i] = 0;
         }
 
       if (backend_cups->avahi_service_browser_paths[i])
         {
-          g_dbus_connection_call (backend_cups->dbus_connection,
-                                  AVAHI_BUS,
-                                  backend_cups->avahi_service_browser_paths[i],
-                                  AVAHI_SERVICE_BROWSER_IFACE,
-                                  "Free",
-                                  NULL,
-                                  NULL,
-                                  G_DBUS_CALL_FLAGS_NONE,
-                                  -1,
-                                  NULL,
-                                  NULL,
-                                  NULL);
           g_clear_pointer (&backend_cups->avahi_service_browser_paths[i], g_free);
         }
     }
 
   if (backend_cups->avahi_service_browser_subscription_id > 0)
     {
-      g_dbus_connection_signal_unsubscribe (backend_cups->dbus_connection,
-                                            backend_cups->avahi_service_browser_subscription_id);
       backend_cups->avahi_service_browser_subscription_id = 0;
     }
 
@@ -3279,9 +3263,7 @@ avahi_service_resolver_cb (GObject      *source_object,
   gint                     aprotocol;
   gint                     i, j;
 
-  output = g_dbus_connection_call_finish (G_DBUS_CONNECTION (source_object),
-                                          res,
-                                          &error);
+  output = NULL;
   if (output)
     {
       backend = GTK_PRINT_BACKEND_CUPS (user_data);
@@ -3464,25 +3446,6 @@ avahi_service_browser_signal_handler (GDBusConnection *connection,
       if (g_strcmp0 (type, "_ipp._tcp") == 0 ||
           g_strcmp0 (type, "_ipps._tcp") == 0)
         {
-          g_dbus_connection_call (backend->dbus_connection,
-                                  AVAHI_BUS,
-                                  "/",
-                                  AVAHI_SERVER_IFACE,
-                                  "ResolveService",
-                                  g_variant_new ("(iisssiu)",
-                                                 interface,
-                                                 protocol,
-                                                 name,
-                                                 type,
-                                                 domain,
-                                                 AVAHI_PROTO_UNSPEC,
-                                                 0),
-                                  G_VARIANT_TYPE ("(iissssisqaayu)"),
-                                  G_DBUS_CALL_FLAGS_NONE,
-                                  -1,
-                                  backend->avahi_cancellable,
-                                  avahi_service_resolver_cb,
-                                  user_data);
         }
     }
   else if (g_strcmp0 (signal_name, "ItemRemove") == 0)
@@ -3535,8 +3498,6 @@ unsubscribe_general_subscription_cb (gpointer user_data)
 {
   GtkPrintBackendCups *cups_backend = user_data;
 
-  g_dbus_connection_signal_unsubscribe (cups_backend->dbus_connection,
-                                        cups_backend->avahi_service_browser_subscription_id);
   cups_backend->avahi_service_browser_subscription_id = 0;
   cups_backend->unsubscribe_general_subscription_id = 0;
 
@@ -3553,9 +3514,7 @@ avahi_service_browser_new_cb (GObject      *source_object,
   GError              *error = NULL;
   gint                 i;
 
-  output = g_dbus_connection_call_finish (G_DBUS_CONNECTION (source_object),
-                                          res,
-                                          &error);
+  output = NULL;
   if (output)
     {
       cups_backend = GTK_PRINT_BACKEND_CUPS (user_data);
@@ -3564,16 +3523,6 @@ avahi_service_browser_new_cb (GObject      *source_object,
       g_variant_get (output, "(o)", &cups_backend->avahi_service_browser_paths[i]);
 
       cups_backend->avahi_service_browser_subscription_ids[i] =
-        g_dbus_connection_signal_subscribe (cups_backend->dbus_connection,
-                                            NULL,
-                                            AVAHI_SERVICE_BROWSER_IFACE,
-                                            NULL,
-                                            cups_backend->avahi_service_browser_paths[i],
-                                            NULL,
-                                            G_DBUS_SIGNAL_FLAGS_NONE,
-                                            avahi_service_browser_signal_handler,
-                                            user_data,
-                                            NULL);
 
       /*
        * The general subscription for all service browsers is not needed
@@ -3633,54 +3582,10 @@ avahi_create_browsers (GObject      *source_object,
    * after its creation.
    */
   cups_backend->avahi_service_browser_subscription_id =
-    g_dbus_connection_signal_subscribe  (cups_backend->dbus_connection,
-                                         NULL,
-                                         AVAHI_SERVICE_BROWSER_IFACE,
-                                         NULL,
-                                         NULL,
-                                         NULL,
-                                         G_DBUS_SIGNAL_FLAGS_NONE,
-                                         avahi_service_browser_signal_handler,
-                                         cups_backend,
-                                         NULL);
+
   /*
    * Create service browsers for _ipp._tcp and _ipps._tcp services.
    */
-  g_dbus_connection_call (cups_backend->dbus_connection,
-                          AVAHI_BUS,
-                          "/",
-                          AVAHI_SERVER_IFACE,
-                          "ServiceBrowserNew",
-                          g_variant_new ("(iissu)",
-                                         AVAHI_IF_UNSPEC,
-                                         AVAHI_PROTO_UNSPEC,
-                                         "_ipp._tcp",
-                                         "",
-                                         0),
-                          G_VARIANT_TYPE ("(o)"),
-                          G_DBUS_CALL_FLAGS_NONE,
-                          -1,
-                          cups_backend->avahi_cancellable,
-                          avahi_service_browser_new_cb,
-                          cups_backend);
-
-  g_dbus_connection_call (cups_backend->dbus_connection,
-                          AVAHI_BUS,
-                          "/",
-                          AVAHI_SERVER_IFACE,
-                          "ServiceBrowserNew",
-                          g_variant_new ("(iissu)",
-                                         AVAHI_IF_UNSPEC,
-                                         AVAHI_PROTO_UNSPEC,
-                                         "_ipps._tcp",
-                                         "",
-                                         0),
-                          G_VARIANT_TYPE ("(o)"),
-                          G_DBUS_CALL_FLAGS_NONE,
-                          -1,
-                          cups_backend->avahi_cancellable,
-                          avahi_service_browser_new_cb,
-                          cups_backend);
 }
 
 static void
diff --git a/tests/testgmenu.c b/tests/testgmenu.c
index 246a4ed..f8a485d 100644
--- a/tests/testgmenu.c
+++ b/tests/testgmenu.c
@@ -641,15 +641,6 @@ main (int argc, char *argv[])
 
   bus = g_bus_get_sync (G_BUS_TYPE_SESSION, NULL, NULL);
 
-  if (do_import)
-    {
-      g_print ("Getting menus from the bus...\n");
-      model = (GMenuModel*)g_dbus_menu_model_get (bus, BUS_NAME, OBJ_PATH);
-      g_print ("Getting actions from the bus...\n");
-      group = (GActionGroup*)g_dbus_action_group_get (bus, BUS_NAME, OBJ_PATH);
-    }
-  else
-    {
       group = get_group ();
       model = get_model ();
 
@@ -657,33 +648,13 @@ main (int argc, char *argv[])
       gtk_container_add (GTK_CONTAINER (box), tv);
       buttons = create_add_remove_buttons (group, model, tv);
       gtk_container_add (GTK_CONTAINER (box), buttons);
-    }
 
-  if (do_export)
-    {
-      g_print ("Exporting menus on the bus...\n");
-      if (!g_dbus_connection_export_menu_model (bus, OBJ_PATH, model, &error))
-        {
-          g_warning ("Menu export failed: %s", error->message);
-          exit (1);
-        }
-      g_print ("Exporting actions on the bus...\n");
-      if (!g_dbus_connection_export_action_group (bus, OBJ_PATH, group, &error))
-        {
-          g_warning ("Action export failed: %s", error->message);
-          exit (1);
-        }
-      g_bus_own_name_on_connection (bus, BUS_NAME, 0, NULL, NULL, NULL, NULL);
-    }
-  else
-    {
       button = gtk_menu_button_new ();
       gtk_button_set_label (GTK_BUTTON (button), "Click here");
       gtk_menu_button_set_use_popover (GTK_MENU_BUTTON (button), TRUE);
       gtk_menu_button_set_menu_model (GTK_MENU_BUTTON (button), model);
       gtk_widget_insert_action_group (button, "actions", group);
       gtk_container_add (GTK_CONTAINER (box), button);
-    }
 
   gtk_widget_show_all (window);
 
